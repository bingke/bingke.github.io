<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019影单]]></title>
    <url>%2F2019%2F01%2F09%2F2019%E5%BD%B1%E5%8D%95%2F</url>
    <content type="text"><![CDATA[“谢谢你忍受我。希望你能记得我。”这是一切的开始。 2019年1月3日 《穿条纹睡衣的男孩》 看，报应哪回直接刺伤你，他只会伤害你最爱的人，然后你无病无灾，万寿无疆，生不如死。 2019年1月8日 《漂亮男孩》 前记：漂亮男孩尼克失踪复吸多日，打通父亲的电话。 “尼克？” “是我。 请你不要讨厌我，爸爸。 我知道我做错了。 我想停下来。但是拜托了，拜托了，拜托了… 拜托了，拜托了，拜托不要送我去戒毒所，好吗？ 让我回家吧。你知道吗？ 我才意识到，其实我…我需要回家。你们能给我力量让我停下。 好吗？” “这事不可能。 我也希望我能帮到你。但是我不能。 我做不到。” “不，爸爸，我只是需要你的一点帮助。 请你帮帮我，我想回家。” “打电话给你的（戒毒）导师吧。” “我不想和导师讲话。我想和你说话。” “向他们求助。我爱你。” “我也爱你。” 后记：第二天，漂亮男孩在手腕上注射了过量的毒品。他想要结束这一切。 2019年1月11日 哈珀·李《杀死一只知更鸟》 “知更鸟只唱歌给我们听，什么坏事也不做。它们不吃人们园子里的花果蔬菜，不在玉米藏里做窝，它们只是衷心地为我们唱歌。这就是为什么说杀死一只知更鸟就是一桩罪恶。” 我想律师阿提克斯·芬奇应该就是这世界上最好的父亲。 很喜欢以第一人称以孩童的视角来叙事的小说，刚好这一本就是。 2019年1月14日 音乐剧《歌剧魅影》 这张图是《歌剧魅影》25周年演出截图，里边有好多好多饭桶（Phantom）。 Anthony WarlowJohn Owen-JonesRamin KarimlooClom WilkinsonPeter Jöback 《歌剧魅影》是一个作曲家韦伯送给身为音乐剧演员的妻子布莱曼的礼物。一下子，这部剧就变的独特了起来。 其实《歌剧魅影》剧情是非常苦的。身世悲惨的魅影给了他能给到Christine一切，教她唱歌，为她谱曲，帮她拿到主角。但最终，Christine还是跟子爵走了，留魅影一人在地下湖的阴暗小屋里。 剧情狗血，不过一点都不妨碍唱得好。 25周年纪念版的返场，初代Christine和五位魅影唱起《The Phantom of the Opera》的时候泪目辽。 到现在为止，已经有不止十个人演过魅影了。我最近才意识到，每一位卡司都有自己独特的且不可被替代的地方。前些日子看《我，堂吉诃德》中文版的花絮，龙版本和猫版本的我唐其实很不一样，起初不大喜欢龙版本的我堂，后来看多了发现其实龙版本的我堂也很不错。 他们都好，每个人都很好。 【补个后续：韦伯和布莱曼婚姻关系维系六年之后，分开了。后来出的续集《歌剧魅影2:真爱不死》（ps:韦伯老爷子说最好不要当作是续集来看）据说巡演效果不大好，票不太卖的出去。】 2018年1月18日 音乐剧《莫扎特！》 翻车辽。 两年前看的官摄，今天偶然发现我只看了一半…只能无奈的摊摊手，耸耸肩露，然后立刻立即马上找来补上！ 和法扎比起来，我对德扎的爱要多满满一屋子吧。德扎的叙事方式和卡司都深得我心。(德扎都封箱两年了…而我3月份要去看法扎的小米…这算不算是一种嘲讽？一人血书求德扎20周年复排！) 德语《莫扎特！》更像是莫扎特生平重现，年幼时的音乐天赋被人教主赏识，到后来和母亲离开萨尔茨堡在外寻找合适的工作，再到母亲在巴黎病逝。莫扎特只好返回家乡，路经慕尼黑时，发现当初答应爱他一生的人已经要与他人成婚。回到萨尔茨堡继续受雇于大主教。虽然他此时创作的一首歌剧大获赞，但大主教经常揶揄他。后来莫扎特独立出来，他终于能够自由的作曲了。再后来莫扎特认识了康丝坦兹（Constanze），与她相爱结婚。后来的这几年里，莫父去世，康丝坦兹家人不断地压榨，莫扎特身体越来差，生活也越来越拮据。1791年7月，一位不知名人士要求他匿名创作一首《安魂曲》，曲子还未完成，莫扎特就辞世了。 乌豆（Oedo Kuipers）出演的莫扎特（Mozart）。他其实不是母语演员，他是荷兰人。不知道大家有没有听说过“不知道荷兰人是什么怪物，每个人都会好几种语言”。乌豆也是其中之一。还有乌豆在剧中的一身白衣呀，真是抓人眼球。“之前看完德扎内心寂寥无法排遣，过年不顾母上阻止抽风买了一身白。要是诸君在街上看到一个穿着白衣白裤白外套嘴里哼着老子就是音乐老子就是怪胎之类的中二歌曲的中二少女请多给她一些关爱”。这是摘的b站上的评论。 大表哥（Mark Seibert）出演的亲王大主教。整个一个行走的荷尔蒙，虽然角色比较反派，但是完全不影响大家对他的爱！向大家推荐大表哥的向主出柜神曲《Wie Kann Es Möglich Sein》。 整场演出都在不断地写不停地写的红衣小莫扎特。小莫扎特在我看来是神来之笔，他是莫扎特心中音乐天赋的化身，莫扎特心思不在创作的时候他生气，莫扎特谱曲时他就不停地写。但在莫扎特奄奄一息求小莫扎特不要让创作耗尽他生命时，小莫扎特毫不犹豫地一笔扎进了莫扎特的心脏。虽然知道骷髅头已经暗示了结局，但还是惊得我满地找牙。 吹一下星星落下那首歌《Gold von den Sternen》真的唱的太好了。 再记一下两年前循环无数次的陪我熬过很迷茫的一段的时间的《Wie wird man seinen Schatten los》！]]></content>
      <tags>
        <tag>不只是影单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何简单使用Git进行版本控制]]></title>
    <url>%2F2018%2F11%2F25%2Fgit%2F</url>
    <content type="text"><![CDATA[本文内容涵盖你在使用Git完成各种工作中将要使用的各种基本命令。 在学习完本章之后，你应该能够配置并初始化一个仓库(repository)、开始或停止跟踪 (track)文件、暂存(stage)或提交(commit)更改。 在保存和对待各种信息的时候与其它版本控制系统有很大差异，尽管操作起来的命令形式非常相近，理解这些差异将有助于防止你使用中的困惑。 Git特点：直接记录快照，而非差异比较Git和其它版本控制系统(包括Subversion和近似工具)的主要差别在于Git对待数据的方法。概念上来区分，其它大部分系统以文件变更列表的方式存储信息。这类系统(CVS、Subversion、Perforce、Bazaar等等)将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。Git不按照以上方式对待或保存数据。反之，Git更像是把数据看作是对小型文件系统的一组快照。每次你提交更新，或在Git中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有修改，Git不再重新存储该文件，而是只保留一个链接指向之前存储的文件。Git对待数据更像是一个快照流。 Git的三种状态Git有三种状态，你的文件可能处于其中之一:已提交(committed)、已修改(modified)和已暂存(staged)。已提交表示数据已经安全的保存在本地数据库中。已修改表示修改了文件，但还没保存到数据库中。已暂存表示对一个已修改文件的当前 版本做了标记，使之包含在下次提交的快照中。 安装 Git如果你想在Linux上用二进制安装程序来安装Git，可以使用发行版包含的基础软件包管理工具来安装在 Mac上安装Git有多种方式。最简单的方法是安装 Xcode Command Line Tools。在 Windows上安装Git也有几种安装方法。官方版本可以在Git官方网站下载。 初次运行 Git 前的配置用户信息当安装完Git应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会 使用这些信息，并且它会写入到你的每一次提交中，不可更改: 12$ git config --global user.name &quot;John Doe&quot;$ git config --global user.email johndoe@example.com 检查配置信息如果想要检查你的配置，可以使用git config –list命令来列出所有Git当时能找到的配置。你可能会看到重复的变量名，因为Git会从不同的文件中读取同一个配置(例如:/etc/gitconfig 与 ~/.gitconfig)。这种情况下Git会使用它找到的每一个变量的最后一个配置。 获取帮助若你使用 Git 时需要获取帮助，有三种方法可以找到 Git 命令的使用手册: 123$ git help &lt;verb&gt;$ git &lt;verb&gt; --help$ man git-&lt;verb&gt; 获取 Git 仓库有两种取得Git项目仓库的方法。 第一种是在现有项目或目录下导入所有文件到Git中; 第二种是从一个服务器克隆一个现有的Git仓库。在现有目录中初始化仓库： 1$ git init 克隆现有的仓库： 1$ git clone https://github.com/libgit2/libgit2 如果你想在克隆远程仓库的 时候，自定义本地仓库的名字，你可以使用如下命令: 1$ git clone https://github.com/libgit2/libgit2 mylibgit 记录每次更新到仓库检查当前文件状态要查看哪些文件处于什么状态，可以用 git status 命令。 如果在克隆仓库后立即使用此命令，会看到类似这 样的输出: 123$ git statusOn branch masternothing to commit, working directory clean 跟踪新文件使用命令 git add 开始跟踪一个文件。 所以，要跟踪 README 文件，运行： 1$ git add README 暂存已修改文件现在我们来修改一个已被跟踪的文件。如果你修改了一个名为CONTRIBUTING.md的已被跟踪的文件，要暂存这次更新，需要运行 git add 命令。 1$ git add CONTRIBUTING.md 状态简览git status 命令的输出十分详细，但其用语有些繁琐。如果你使用 git status -s 命令或 git status –short命令，你将得到一种更为紧凑的格式输出。 忽略文件一般我们总会有些文件无需纳入Git的管理，也不希望它们总出现在未跟踪文件列表。在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。来看一个实际的例子: 123$ cat .gitignore*.[oa]*~ 第一行告诉Git忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。第二行告诉Git忽略所有以波浪符(~)结尾的文件，许多文本编辑软件(比如Emacs)都用这样的文件名保存副本。 提交更新现在的暂存区域已经准备妥当可以提交了。 在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。 1$ git commit 这种方式会启动文本编辑器以便输入本次提交的说明。另外，你也可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行，如下所示: 1234$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;master 463dc4f] Story 182: Fix benchmarks for speed 2 files changed, 2 insertions(+) create mode 100644 README 移除文件要从Git中移除某个文件，就必须要从已跟踪文件清单中移除(确切地说，是从暂存区域移除)，然后提交。可以用git rm命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。 12345678$ git rm PROJECTS.mdrm &apos;PROJECTS.md&apos;$ git statusOn branch masterChanges to be committed: (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage) deleted: PROJECTS.md 下一次提交时，该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用 强制删除选项 -f(译注:即 force 的首字母)。这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被Git恢复。 移动文件1$ git mv file_from file_to 远程仓库的使用查看远程仓库如果想查看你已经配置的远程仓库服务器，可以运行 git remote 命令。你也可以指定选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。 123$ git remote -vorigin https://github.com/schacon/ticgit (fetch)origin https://github.com/schacon/ticgit (push) 添加远程仓库我在之前的章节中已经提到并展示了如何添加远程仓库的示例，不过这里将告诉你如何明确地做到这一点。 运 行git remote add 添加一个新的远程Git仓库。 从远程仓库中抓取与拉取这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支 的引用，可以随时合并或查看。 1$ git fetch [remote-name] 推送到远程仓库当你想分享你的项目时，必须将其推送到上游当你想要将 master 分支推送到 origin 服务器时(再次说明，克隆时通常会自动帮你设置好那两个 名字)，那么运行这个命令就可以将你所做的备份到服务器。 1$ git push origin master 如果是想要把本地master分支推送远程仓库的hexo分支的话使用命令：1$ git push origin master:hexo 只有当你有所克隆服务器的写入权限，并且之前没有人推送过时，这条命令才能生效。 查看远程仓库如果想要查看某一个远程仓库的更多信息，可以使用 git remote show [remote-name] 命令。 如果想以 一个特定的缩写名运行这个命令，例如 origin，会得到像下面类似的信息: 123456789101112$ git remote show origin * remote origin Fetch URL: https://github.com/schacon/ticgit Push URL: https://github.com/schacon/ticgit HEAD branch: master Remote branches: master tracked dev-branch tracked Local branch configured for &apos;git pull&apos;: master merges with remote master Local ref configured for &apos;git push&apos;: master pushes to master (up to date) 远程仓库的移除与重命名如果想要重命名引用的名字可以运行 git remote rename 去修改一个远程仓库的简写名。 例如，想要将 pb 重命名为paul，可以用git remote rename这样做: 1234$ git remote rename pb paul$ git remoteoriginpaul 值得注意的是这同样也会修改你的远程分支名字。 那些过去引用 pb/master 的现在会引用 paul/master。 如果因为一些原因想要移除一个远程仓库 - 你已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了-可以使用git remote rm: 123$ git remote rm paul$ git remoteorigin 总结现在，你可以完成所有基本的 Git 本地操作-创建或者克隆一个仓库、做更改、暂存并提交这些更改。 致谢：本文内容整理自《Pro Git》一书，作者Scott Chacon and Ben Straub。]]></content>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Useful Website]]></title>
    <url>%2F2018%2F11%2F23%2Fuseful-website%2F</url>
    <content type="text"><![CDATA[&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里面的网站是我一点点积攒起来的。大部分是非常实用，小部分是前辈们经验之谈，更小的部分是我觉得眼前一亮的网站。相信你看完以后一定会有收获哒。 提示：可以利用搜索框直接搜索想要查看的网站类型噢。 【算法】「白话经典算法系列之六 快速排序 快速搞定」 【工具】「改图宝」 【工具】「Latex在线公式编辑器」 【工具】「图床」 【算法】「八皇后问题的漫画图解」 【面经】「腾讯后台开发实习生-面经」 【有趣】「专业表情包搜索网站」 【工具】「盘多多」百度云资源搜索。 【工具】「如何用 macOS 优雅的敲 LaTeX」 【工具】「《17天搞定GRE单词》背单词时间计划表制作」可以用来安排背单词和复习单词的时间，还可以打印。 【机器学习】「机器学习——低秩矩阵分解中低秩的意义、矩阵填补、交叉验证」 【工具】如何在印象笔记中插入数学符号 s]]></content>
      <tags>
        <tag>有用的网站</tag>
      </tags>
  </entry>
</search>
